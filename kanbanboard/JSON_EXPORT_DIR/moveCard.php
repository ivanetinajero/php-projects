<?php
/*
 *   $ php moveCard.php "`ls -At *.json | tail -n 1`" "543038fcb322f16d6a3be7b5"
 */
    require_once '../classes/Tarjeta.php';
    require_once '../classes/Lista.php';  
    require_once '../classes/Connection.php';  
    require_once '../classes/Usuario.php';  
    require_once '../classes/UsuarioDao.php';  
    try {       
        $dt = new DateTime();
        // The first parameter passed to the script is the name of JSON file generated by JimFLow
        //$jsonFile="2014-10-04 14_04_55_11.json";
        $jsonFile=$argv[1]; 
        if ($jsonFile != ""){
           
            // Load Json file            
            $str_data = file_get_contents($jsonFile);    
            $dataJson = json_decode($str_data,true); 
            
            // Load username from Json file
            $usernameQR=$dataJson["board"]["info"]["username"];
            
            // Get token from mysql database
            $conn = new Connection();
            $usuarioDao = new UsuarioDao($conn->getConexion());
            $oUser=$usuarioDao->findByUserName($usernameQR);
            
            // Load IdBoard from Json file
            $idBoard=$dataJson["board"]["info"]["board_id"];
           
            // Put your key and secret provided by Trello. https://trello.com/1/appKey/generate 
            define("CONSUMER_KEY", "dc0af7e595488131774490357b151087");
            define("CONSUMER_SECRET", "c3ce066cc3444631b3311e11062787785b4cfb153b0ede191ae36c77aa303e7b");

            $oauth = new OAuth(CONSUMER_KEY, CONSUMER_SECRET);
            $oauth->disableSSLChecks(); 

            //$oauth->setToken("9b1405382df181210a775c807d42da1312648d356ce25e7c1cd45f2ea0132f47","58e3ed927313788241e500c2c33bee97"); 
            // Recuperamos el token de la base de datos segun el usuario que tiene en el JSON generado por jimflow
            $oauth->setToken($oUser->getOauth_token(),""); 

            /*********************************Trello API Operations ********************************/

            // Create an array of the columns retrieved by the API
            $oauth->fetch("https://trello.com/1/boards/".$idBoard."/lists", array(), OAUTH_HTTP_METHOD_GET);                        
            $data = json_decode($oauth->getLastResponse());             
            $listsTrelloApi = array();
            $n = 0;
            for ($index = 0; $index < count($data); $index++) {    
               $oLista = new Lista($data[$index]->id);
               $oLista->setNombre($data[$index]->name);
               $oLista->setIdTablero($data[$index]->idBoard);
               $oLista->setNoColumn($index);               
               $listsTrelloApi[$n] = $oLista;
               $n++;
            }            

            // Create an array of the cards retrieved by the API            
            $oauth->fetch("https://trello.com/1/boards/".$idBoard."/cards", array(), OAUTH_HTTP_METHOD_GET);            
            $data = json_decode($oauth->getLastResponse());                         
            $cardsTrelloApi = array();
            $n = 0;
            for ($index = 0; $index < count($data); $index++) {    
               $oTarjeta = new Tarjeta($data[$index]->id);
               $oTarjeta->setNombre($data[$index]->name);
               $oTarjeta->setDescripcion($data[$index]->desc);
               $oTarjeta->setUrl($data[$index]->shortUrl);
               $oTarjeta->setShortLink($data[$index]->shortLink);
               $oTarjeta->setIdLista($data[$index]->idList);  
                // Search the Object List by idList in the array of $listsTrelloApi.
               $oList=getListTrelloByIdList($listsTrelloApi,$data[$index]->idList);
               $oTarjeta->setNoColumn($oList->getNoColumn());               
               $cardsTrelloApi[$n] = $oTarjeta;           
               $n++;               
            }            

            // This array will contain all card's information created by JimFlowKlopfer in this jsonFile
            $cardsJimFlow = array();
            $n = 0;
            for ($index = 0; $index < count($dataJson["board"]["informations"]); $index++) {    
               // The last 8 characters will form the idCard
               $idCard=substr($dataJson["board"]["informations"][$index]["data"],-8);      
               $oCard = new Tarjeta($idCard);
               // The field "column" in json file will be used as noColumn in the Tarjeta class
               $oCard->setNoColumn($dataJson["board"]["informations"][$index]["column"]);
               $oCard->setUrl($dataJson["board"]["informations"][$index]["data"]);       
               $cardsJimFlow[$n] = $oCard;       
               $n++;
            } 

            // Loop for moving cards in Trello
            for ($index = 0; $index < count($cardsJimFlow); $index++) {               
                // Search the object Card by shortLink which is the id returned by JimFlow
                $oCard=getCardTrelloByShortLink($cardsTrelloApi,$cardsJimFlow[$index]->getId());                    
                if ($oCard->getNoColumn() != $cardsJimFlow[$index]->getNoColumn()){                    
                    $idCard=$oCard->getId();                    
                    // Search the Object List by noColumn in the array of $listsTrelloApi.
                    $oList=getListTrelloByNoColumn($listsTrelloApi,$cardsJimFlow[$index]->getNoColumn());                    
                    $idNewList=$oList->getId();
                    $oauth->fetch("https://trello.com/1/cards/".$idCard, array("idList"=>$idNewList), OAUTH_HTTP_METHOD_PUT);
                    //$oauth->fetch("https://trello.com/1/cards/542c6a4783f7d5b49671ac04/actions/comments", array("text"=>"SOME COMMENTS"), OAUTH_HTTP_METHOD_POST);                    
                    echo "Moving card...\n";
                 }                    
            }          
            // Delete json file from disk
            unlink($jsonFile);            
            echo "Running cron at: ".$dt->format('Y-m-d H:i:s')."\n";
            /********************************End Trello API Operations******************************/      
        }
        else{
           echo "No json file: Running cron at: ".$dt->format('Y-m-d H:i:s')."\n";
        }   
    } catch(OAuthException $E) {
        echo "Response: ". $E->getMessage(). "\n";
    }
    
    // Search an List Object with idList parameter 
    function getListTrelloByIdList($arrayLists,$idList) {
        foreach ($arrayLists as $object) {            
            if ($object instanceof Lista && $object->getId() == $idList) {
                return $object;
            }
        }
    }
    
    // Search an List Object with noColumn parameter
    function getListTrelloByNoColumn($arrayLists,$noColumn) {
        foreach ($arrayLists as $object) {            
            if ($object instanceof Lista && $object->getNoColumn() == $noColumn) {
                return $object;
            }
        }
    }
    
    // Search an Card Object with shortLink parameter
    function getCardTrelloByShortLink($arrayCards,$shortLink) {
        foreach ($arrayCards as $object) {            
            if ($object instanceof Tarjeta && $object->getShortLink() == $shortLink) {
                return $object;
            }
        }
    }

?>
